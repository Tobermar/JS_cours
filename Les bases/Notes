Cours Java
---------------------------------------------

Cree une variable avec "let"
la decalrer avec "="

let createAVariable = 
---------------------------------------------

"Modifier la valeur"

let numberOfCats = 3;
numberOfCats = 4;

let totalCDs = 67;
let totalVinyls = 34;
let totalMusic = totalCDs + totalVinyls;

let cookiesInJar = 10;
let cookiesRemoved = 2;
let cookiesLeftInJar = cookiesInJar - cookiesRemoved;

let cookiesInJar = 10;
/* manger deux cookies */
cookiesInJar -= 2;  //il reste 8 cookies
/* cuisson d'un nouveau lot de cookies */
cookiesInJar += 12; // il y a maintenant 20 cookies dans la boîte

let numberOfLikes = 10;
numberOfLikes++;  // cela fait 11
numberOfLikes--; // et on revient à 10...qui n'a pas aimé mon article ?

let costPerProduct = 20;
let numberOfProducts = 5;
let totalCost = costPerProduct * numberOfProducts;
let averageCostPerProduct = totalCost / numberOfProducts;

let numberOfCats = 2;
numberOfCats *= 6;  // numberOfCats vaut maintenant 2*6 = 12;
numberOfCats /= 3;  // numberOfCats vaut maintenant 12/3 = 4;
---------------------------------------------

"Constante"

const nombrePostParPage = 20;
nombrePostParPage = 30; // Retournera une erreur dans la console car on ne peut plus changer sa valeur
---------------------------------------------

"TYPE de variable"

number (nombre) ;
let number = 15
string (chaîne de caractères) ;
let character = "test" // entre guillements
boolean (valeur logique).
let bolean = true/false
---------------------------------------------

"Les Objets"

Les objets JavaScript sont écrits en JSON (JavaScript Object Notation). 
Ce sont des séries de "paires clés-valeurs" séparées par des virgules, entre des accolades. 
Les objets peuvent être enregistrés dans une variable :

let myBook = {
    title: 'The Story of Tau',
    author: 'Will Alexander',
    numberOfPages: 250,
    isAvailable: true
};

Accédez aux données d'un objet objet avec 

--la notation pointée (dot notation)

let BookTitle = myBook.title;
let BookPages = myBook.numberOfPages;

--La notation bracket

let bookTitle = myBook["title"];
let bookPages = myBook["numberOfPages"];

L'intérêt ici c’est qu’on va pouvoir mettre entre bracket une variable qui contient en string 
le nom de la propriété que l’on souhaite atteindre. Par exemple :

let propertyToAccess = "title";
let bookTitle = myBook[propertyToAccess];  
---------------------------------------------

"'Les classes'"

une classe est un modèle pour un objet dans le code.  
Elle permet de construire plusieurs objets du même type (appelés instances de la même classe)

Le  "constructor" d'une classe est la fonction qui est appelée quand on 
crée une nouvelle instance de cette classe avec le mot clé  'new'.

class Book {
    constructor(title, author, pages) {
        this.title = title;
        this.author = author;
        this.pages = pages;
    }
}
------

let myBook = new Book("L'Histoire de Tao", "Will Alexander", 250);
//Cette ligne crée l'objet suivant :
{
    title: "L'Histoire de Tao",
    author: "Will Alexander",
    pages: 250
}
---------------------------------------------

"le tableau (array)"

let guests = ["Sarah Kate", "Audrey Simon", "Will Alexander"];

let firstGuest = guests[0]; // "Sarah Kate"
let thirdGuest = guests[2]; // "Will Alexander"
let undefinedGuest = guests[12] // undefined

"N'oubliez pas de démarrer à l'indice  0  !"

diffrence |e| valeur et référence :
"valeur" est pour les "primitif" (string,boolean,number(undefined,null))
"référence" est pourt les "objets" (array,function,object)

travailler sur le tableau :

let guests = ["Will Alexander", "Sarah Kate", "Audrey Simon"];
let howManyGuests = guests.length; // 3

guest.push revient à ajouter un guest en fin de tableau
guest.unshift revient à ajouter un guest au debut du tableau
guest.pop revient à retirer le dernier guest du tableau
---------------------------------------------

"'Déroulement du programme'"

Le déroulement du programme est un terme général qui décrit l'ordre dans lequel 
s'exécutent vos lignes de code.Cela signifie que certaines lignes seront lues une seule 
fois, certaines plusieurs fois, et d'autres complètement ignorées, selon la situation.

instructions conditionnelles: if/else

--Utilisez des expressions :
(<
<=
==
>
>=
!= (différent de))
---------------------------------------------

Il y a deux façons de vérifier si deux valeurs sont égales en
JavaScript :  "==" et '===', aussi appelées égalité "simple" et égalité 'stricte' :

l''égalité simple vérifie la valeur, mais pas le type. Donc ceci renvoie la valeur true  :
5 == "5"

par contre, l''égalité stricte vérifie à la fois la valeur et le type. Donc :
5 === "5"
renvoie   false  , car on compare un   number  à une   string  .

De même, il y a deux opérateurs d'inégalité,   !=  et   !==  , avec la même distinction.

--condition multiple

Dans certaines situations, vous souhaitez vérifier plusieurs conditions pour un même résultat ; par exemple dans la même instruction if. Pour cela, il existe des opérateurs logiques :

&&  – ET logique – pour vérifier si deux conditions sont toutes les deux vraies ;

||    – OU logique – pour vérifier si au moins une condition est vraie ;

!    – NON logique – pour vérifier si une condition n'est pas vraie. 

let userLoggedIn = true;
let UserHasPremiumAccount = true;
let userHasMegaPremiumAccount = false;

userLoggedIn && userHasPremiumAccount; // true
userLoggedIn && userHasMegaPremiumAccount; // false

userLoggedIn || userHasPremiumAccount; // true
userLoggedIn || userHasMegaPremiumAccount; // true

!userLoggedIn; // false
!userHasMegaPremiumAccount; // true
---------------------------------------------

La valeur d\une d\une variable doit etre dans son "scope", c\est a dire son bloc, doit etre a l'interrieur de

let userLoggedIn = true;

if (userLoggedIn) {
   let welcomeMessage = 'Welcome back!';
} else {
   let welcomeMessage = 'Welcome new user!';
}

console.log(welcomeMessage); // renvoie une erreur


let userLoggedIn = true;
let welcomeMessage = ''; // déclarer la variable ici

if (userLoggedIn) {
    welcomeMessage = 'Welcome back!'; // modifier la variable extérieure
} else {
    welcomeMessage = 'Welcome new user!'; // modifier la variable extérieure
}

console.log(welcomeMessage); // imprime 'Welcome back!'
---------------------------------------------

"Instruction switch"

let firstUser = {
    name: "Will Alexander",
    age: 33,
    accountLevel: "normal"
};

let secondUser = {
    name: "Sarah Kate",
    age: 21,
    accountLevel: "premium"
};

let thirdUser = {
    name: "Audrey Simon",
    age: 27,
    accountLevel: "mega-premium"
};


switch (firstUser.accountLevel) {
    case 'normal':
          console.log('You have a normal account!');
    
    break;
    case 'premium':
          console.log('You have a premium account!');
    
    break;
    case 'mega-premium':
          console.log('You have a mega premium account!');
    break;
    
    default:
          console.log('Unknown account type!');
    }

    Comme vous pouvez le voir, les instructions   switch  utilisent aussi des accolades. 
    C'est un autre exemple de bloc de code, donc les variables éventuellement déclarées à 
    l'intérieur d'une instruction switch  ne seront pas disponibles pour le code environnant !
---------------------------------------------


"Boucle for"

const numberOfPassengers = 10;
for (let i = 0; i < numberOfPassengers; i++) {
   console.log("Passager embarqué !");
}

console.log("Tous les passagers sont embarqués !");


Pour cette boucle for ,creez une variable d\indice "i" qui sert de compteur pour le nombre 
d\executions de la boucle. C\est pour cette raison qu\elle demarrera a zero, car on n\a pas 
encore parcouru la boucle.

La deuxieme commande dans les parentheses for est la condition de poursuite de la boucle : 
des qu\elle s\evalue comme false , on quitte la boucle. Dans ce cas, vous souhaitez 
l\executer autant de fois qu\il y a de passagers, donc quand l\indice  i  atteint 10 
(apres 10 boucles), vous souhaitez l\arreter, car il n\y a plus de passager.

La troisieme commande demande à la boucle for d\incrementer i (ajouter 1) a chaque execution. 
C\est ce qui permet de suivre le nombre d\executions de la boucle.



